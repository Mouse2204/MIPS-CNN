convolution:
	# Base addresses
	la $t0, image	# padded image
	la $t1, kernel	# kernel
	la $t2, matrix_output	# output
	# Load parameters
	lw $t3, n	# n
	lw $t4, m	# m
	lw $t5, p	# padding
	lw $t6, s	# stride
	
	# Compute output size: ((N - M) / S) + 1
	sub $t7, $t3, $t4	# N - M
	div $t7, $t7, $t6	# N  - M / S
	addi $t7, $t7, 1	# Add 1
	sw $t7, matrix_output_size	# Store output size

	# Loop through output matrix
	li $t8, 0	# Output row index

	row_loop:
	beq $t8, $t7, finish_convolution
	li $t9, 0	# Output col index

	col_loop:
	beq $t9, $t7, next_row
	# Initialize sum
	mtc1 $zero, $f0		# Reset sum

	# Loop through kernel
	li $s0, 0 	# Kernel row

	kernel_row:
	beq $s0, $t4, finish_kernel_row
	li $s1, 0	# Kernel col

	kernel_col:
	beq $s1, $t4, next_kernel_row1
	
	# Compute image index
	mul $s2, $t8, $t6	# Row output x stride
	add $s2, $s2, $s0	# Add kernel row
	mul $s3, $t9, $t6	# Col output x stride
	add $s3, $s3, $s1	# Add kernel col
	mul $s2, $s2, $t3	# Row x image width
	add $s2, $s2, $s3	# Add col
	mul $s2, $s2, 4		# Byte offset
	add $s2, $t0, $s2	# Add base address
	lwc1 $f1, 0($s2)	# Load image value

	# Compute kernel index
	mul $s3, $s0, $t4	# Kernel row x width
	add $s3, $s3, $s1	# Add kernel col
	mul $s3, $s3, 4		# Byte offset
	add $s3, $t1, $s3	# Add base address
	lwc1 $f2, 0($s3)	# Load kernel value

	# Multiply and accumulate
	mul.s $f3, $f1, $f2
	add.s $f0, $f0, $f3
	addi $s1, $s1, 1	# Next kernel col
	j kernel_col

	next_kernel_row1:
	addi $s0, $s0, 1	# Next kernel row
	j kernel_row

	finish_kernel_row:
	# Store result
	mul $s0, $t8, $t7	# Row x output width
	add $s0, $s0, $t9	# Add col
	mul $s0, $s0, 4		# Byte offset
	add $s0, $t2, $s0	# Add base address
	swc1 $f0, 0($s0)	# Store result
	addi $t9, $t9, 1	# Next output col
	j col_loop

	next_row:
	addi $t8, $t8, 1	# Next output row
	j row_loop

finish_convolution:
	jr $ra
